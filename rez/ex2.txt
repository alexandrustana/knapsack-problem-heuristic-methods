Randomly build 4 datasets: DS8 with N 8 = 8 objects, DS 10 wit h N 10 = 10 objects, DS 50 with N 50 = 50  objects  and  DS 100 with  N 100 = 100  objects.  You  should  take  care  when  building  the  datasets,  because a small value for G and large values in g[] will have a bad influence on the solution space.  We want the solution spa ce very large, so the “random” generation process should not be exactly  random, but rather controlled. For example, values in g[] should be chosen in relation to G, so that  the size of the solution space remains considerably large.

val DS8   = DS.build(8) (N = 8, G = 10, v = List(32,67,2,86,87,36,19,27), g = List(7,3,31,23,3,25,10,6))
val DS10  = DS.build(10) (N = 10, G = 92, v = List(44,76,66,94,47,37,56,45,50,10), g = List(45,36,23,26,26,1,22,2,38,1))
val DS50  = DS.build(50) (N = 50, G = 63, v = List(98,42,66,91,11,97,51,12,89,64,95,16,40,37,60,42,47,63,43,29,96,65,74,51,99,5,60,12,74,10,71,78,34,52,88,79,76,68,6,2,51,65,5,16,49,53,63,83,29,94), g = List(16,17,18,31,15,1,29,9,27,16,19,10,31,8,24,1,13,19,28,19,21,16,25,26,1,30,1,3,30,4,16,28,10,4,17,3,1,17,18,22,19,27,3,10,9,4,28,14,25,2))
val DS100 = DS.build(100) (N = 100, G = 46, v = List(47,26,83,70,6,25,66,73,59,98,80,33,53,7,85,82,71,65,52,38,83,25,13,99,6,82,35,30,4,8,100,89,93,1,81,8,42,18,1,47,78,63,51,29,29,8,20,96,30,44,51,2,77,44,27,65,15,24,15,96,30,99,77,94,6,68,58,67,90,98,55,85,89,60,32,17,29,26,33,40,45,44,66,54,91,89,5,78,73,1,76,39,1,55,72,50,61,23,4,16), g = List(17,7,13,22,13,14,10,15,10,22,8,19,7,8,14,7,6,14,7,19,10,10,19,15,23,20,14,22,18,8,8,12,23,1,14,2,11,9,12,16,14,7,13,21,17,6,17,19,4,16,3,12,15,10,19,17,11,21,4,22,6,19,2,7,8,15,8,4,12,3,1,6,2,13,7,6,2,11,3,20,22,15,19,20,21,17,20,21,8,17,20,17,4,2,14,6,20,6,16,18))

def build(N: Int, threshold: Int = 100): DS = {
    val G = Random.nextInt(threshold) + 1
    DS(
      G = G,
      N = N,
      g = (1 to N).map(_ => Random.nextInt(if (G / 2 == 0) 1 else G / 2) + 1).toList,
      v = (1 to N).map(_ => Random.nextInt(threshold) + 1).toList
    )
  }